[{"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\reportWebVitals.js":"1","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\App.js":"2","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\TreeDisplay.js":"3","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\index.js":"4","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\SelectorDisplay.js":"5","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\ProductIcon.js":"6","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\SubcategoryIcon.js":"7","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\RelatedDisplay.js":"8","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\ChordDisplay.js":"9"},{"size":362,"mtime":1607839213783,"results":"10","hashOfConfig":"11"},{"size":1828,"mtime":1607996793893,"results":"12","hashOfConfig":"11"},{"size":2345,"mtime":1607968098407,"results":"13","hashOfConfig":"11"},{"size":500,"mtime":1607839213783,"results":"14","hashOfConfig":"11"},{"size":2889,"mtime":1607930604942,"results":"15","hashOfConfig":"11"},{"size":418,"mtime":1607911867303,"results":"16","hashOfConfig":"11"},{"size":900,"mtime":1607911737939,"results":"17","hashOfConfig":"11"},{"size":7858,"mtime":1607930182921,"results":"18","hashOfConfig":"11"},{"size":4104,"mtime":1607987803989,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x853ch",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\reportWebVitals.js",[],"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\App.js",["41"],"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\TreeDisplay.js",["42"],"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\index.js",[],["43","44"],"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\SelectorDisplay.js",["45","46","47"],"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\ProductIcon.js",[],"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\SubcategoryIcon.js",[],"C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\RelatedDisplay.js",["48"],"import { Component } from 'react';\r\nimport { getTreeToNodes } from './TreeDisplay';\r\n\r\nimport nodes from './data/data.json';\r\n\r\nconst getDistanceBetweenNodes = (nodeId1, nodeId2) => {\r\n\tif (nodeId1 === nodeId2) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tconst tree = getTreeToNodes(nodeId1, nodeId2);\r\n\r\n\tlet branch = tree[0];\r\n\t\r\n\t// tree is just the root\r\n\tif (branch.name === \"root\" && branch.children === undefined) {\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tlet onSameBranch = false;\r\n\tlet onSameBranchCnt = 1;\r\n\r\n\t// iterate until there is more than one child; this is the branching point\r\n\twhile (branch.children !== undefined && branch.children.length < 2) {\r\n\t\tif (onSameBranch) {\r\n\t\t\tonSameBranchCnt += 1;\r\n\t\t}\r\n\t\tif (branch.nodeId === nodeId1 || branch.nodeId === nodeId2) {\r\n\t\t\tonSameBranch = true;\r\n\t\t}\r\n\t\tbranch = branch.children[0];\r\n\t}\r\n\r\n\tif (onSameBranch) {\r\n\t\treturn onSameBranchCnt;\r\n\t}\r\n\r\n\t// count left children until there are no more\r\n\tlet leftCnt = 1;\r\n\tlet leftChild = branch.children[0];\r\n\r\n\twhile (leftChild.children !== undefined) {\r\n\t\tleftCnt += 1;\r\n\t\tleftChild = leftChild.children[0];\r\n\t}\r\n\r\n\t// count right children until there are no more\r\n\tlet rightCnt = 1;\r\n\tlet rightChild = branch.children[1];\r\n\r\n\twhile (rightChild.children !== undefined) {\r\n\t\trightCnt += 1;\r\n\t\trightChild = rightChild.children[0];\r\n\t}\r\n\r\n\treturn(leftCnt + rightCnt);\r\n}\r\n\r\nclass RelatedDisplay extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tsortFunction: this.sortByCategory,\r\n\t\t\tkeyword: \"category\"\r\n\t\t}\r\n\r\n\t\tthis.setSortFunction = this.setSortFunction.bind(this);\r\n\t}\r\n\r\n\tsortByCategory = (a, b) => {\r\n\t\tconst aName = nodes[a].name.toUpperCase();\r\n\t\tconst bName = nodes[b].name.toUpperCase();\r\n\t\tif (aName < bName) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (aName > bName) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t// if we reach here, they are equal and we should break ties with\r\n\t\t// the path\r\n\t\tconst aPathString = nodes[a].path.slice(1, nodes[a].path.length - 1)\r\n\t\t\t.map(pathNode => pathNode.nodeName)\r\n\t\t\t.join(\" > \") + \" >\";\r\n\t\tconst bPathString = nodes[b].path.slice(1, nodes[b].path.length - 1)\r\n\t\t\t.map(pathNode => pathNode.nodeName)\r\n\t\t\t.join(\" > \") + \" >\";\r\n\t\tif (aPathString < bPathString) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (aPathString > bPathString) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t// truly the same\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tsortByOverlap = (a, b) => {\r\n\t\tconst aOverlap = this.props.selNode.also[a];\r\n\t\tconst bOverlap = this.props.selNode.also[b];\r\n\r\n\t\tif (aOverlap < bOverlap) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (aOverlap > bOverlap) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\trevSortByOverlap = (a, b) => {\r\n\t\treturn -1 * (this.sortByOverlap(a, b));\r\n\t}\r\n\r\n\tsortByPrdCnt = (a, b) => {\r\n\t\tconst aPrdCnt = nodes[a].subPrdCnt;\r\n\t\tconst bPrdCnt = nodes[b].subPrdCnt;\r\n\r\n\t\tif (aPrdCnt < bPrdCnt) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (aPrdCnt > bPrdCnt) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\trevSortByPrdCnt = (a, b) => {\r\n\t\treturn -1 * this.sortByPrdCnt(a, b);\r\n\t}\r\n\r\n\tsortByDistance = (a, b) => {\r\n\t\tconst aDist = getDistanceBetweenNodes(this.props.selNode.id, a);\r\n\t\tconst bDist = getDistanceBetweenNodes(this.props.selNode.id, b);\r\n\r\n\t\tif (aDist < bDist) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (aDist > bDist) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\trevSortByDistance = (a, b) => {\r\n\t\treturn -1 * this.sortByDistance(a, b);\r\n\t}\r\n\r\n\trevSortByCategory = (a, b) => {\r\n\t\treturn -1 * this.sortByCategory(a, b);\r\n\t}\r\n\r\n\tsetSortFunction = (keyword) => {\r\n\t\tconsole.log(\"keyword\");\r\n\t\tconst curKeyword = this.state.keyword;\r\n\t\t// we're going in reverse order\r\n\t\tif (curKeyword === keyword) {\r\n\t\t\tif (keyword === \"category\") {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsortFunction: this.revSortByCategory,\r\n\t\t\t\t\tkeyword: keyword.split(\"\").reverse().join(\"\")\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (keyword === \"overlap\") {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsortFunction: this.revSortByOverlap,\r\n\t\t\t\t\tkeyword: keyword.split(\"\").reverse().join(\"\")\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (keyword === \"prdcnt\") {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsortFunction: this.revSortByPrdCnt,\r\n\t\t\t\t\tkeyword: keyword.split(\"\").reverse().join(\"\")\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (keyword === \"distance\") {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsortFunction: this.revSortByDistance,\r\n\t\t\t\t\tkeyword: keyword.split(\"\").reverse().join(\"\")\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (keyword === \"category\") {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsortFunction: this.sortByCategory,\r\n\t\t\t\tkeyword: keyword\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (keyword === \"overlap\") {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsortFunction: this.sortByOverlap,\r\n\t\t\t\tkeyword: keyword\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (keyword === \"prdcnt\") {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsortFunction: this.sortByPrdCnt,\r\n\t\t\t\tkeyword: keyword\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (keyword === \"distance\") {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsortFunction: this.sortByDistance,\r\n\t\t\t\tkeyword: keyword\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst alsoEntries = Object.keys(this.props.selNode.also).sort(this.state.sortFunction);\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t<div style={{display: \"flex\", flexFlow: \"column\", height: \"100%\"}}>\r\n\t\t\t\t<div style={{border: \"1px solid black\", padding: \"5px\", paddingRight: \"20px\", textAlign: \"center\", backgroundColor: \"#43464B\", color: \"white\"}}>\r\n\t\t\t\t\t<div style={{width: \"40%\", display: \"inline-block\", cursor: \"pointer\"}} onClick={() => this.setSortFunction(\"category\")}>Related Category</div>\r\n\t\t\t\t\t<div style={{width: \"15%\", display: \"inline-block\", cursor: \"pointer\"}} onClick={() => this.setSortFunction(\"overlap\")}>Overlap</div>\r\n\t\t\t\t\t<div style={{width: \"30%\", display: \"inline-block\", cursor: \"pointer\"}} onClick={() => this.setSortFunction(\"prdcnt\")}>Products</div>\r\n\t\t\t\t\t<div style={{width: \"15%\", display: \"inline-block\", cursor: \"pointer\"}} onClick={() => this.setSortFunction(\"distance\")}>Distance</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style={{flexGrow: 1, overflow: \"auto\", width: \"100%\"}}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\talsoEntries.map(alsoNodeId => {\r\n\t\t\t\t\t\t\tconst alsoNode = nodes[alsoNodeId];\r\n\t\t\t\t\t\t\tconst pathString = alsoNode.path.slice(1, alsoNode.path.length - 1)\r\n\t\t\t\t\t\t\t\t.map(pathNode => pathNode.nodeName)\r\n\t\t\t\t\t\t\t\t.join(\" > \") + \" >\";\r\n\r\n\t\t\t\t\t\t\tlet backgroundColor = \"white\";\r\n\t\t\t\t\t\t\tlet color = \"black\";\r\n\r\n\t\t\t\t\t\t\tif (this.props.relNode !== undefined) {\r\n\t\t\t\t\t\t\t\tif (this.props.relNode.id == alsoNodeId) {\r\n\t\t\t\t\t\t\t\t\tbackgroundColor = \"black\";\r\n\t\t\t\t\t\t\t\t\tcolor = \"white\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div style={{border: \"1px solid black\", padding: \"5px\", cursor: \"pointer\", backgroundColor: backgroundColor, color: color}}\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.props.setRelatedNode(alsoNodeId)}\r\n\t\t\t\t\t\t\t\t\tkey={alsoNodeId}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div style={{width: \"40%\", display: \"inline-block\"}}>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{color: \"gray\", fontSize: \"12px\", display: \"inline-block\"}}>\r\n\t\t\t\t\t\t\t\t\t\t\t{pathString}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{alsoNode.name}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div style={{width: \"15%\", display: \"inline-block\", textAlign: \"center\"}}>\r\n\t\t\t\t\t\t\t\t\t\t{this.props.selNode.also[alsoNodeId]}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div style={{width: \"30%\", display: \"inline-block\", textAlign: \"center\"}}>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{display: \"inline-block\", height: \"12px\", backgroundColor: \"green\", width: `${Math.round((alsoNode.prdCnt / (alsoNode.subPrdCnt)) * 100)}%`}}></div>\r\n\t\t\t\t\t\t\t\t\t\t<div style={{display: \"inline-block\", height: \"12px\", backgroundColor: \"red\", width: `${Math.round(((alsoNode.subPrdCnt - alsoNode.prdCnt) / (alsoNode.subPrdCnt)) * 100)}%`}}></div>\r\n\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t{alsoNode.subPrdCnt} (<span style={{color: 'green'}}>{alsoNode.prdCnt}</span> / <span style={{color: 'red'}}>{alsoNode.subPrdCnt - alsoNode.prdCnt}</span>)\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div style={{width: \"15%\", display: \"inline-block\", textAlign: \"center\"}}>\r\n\t\t\t\t\t\t\t\t\t\t{getDistanceBetweenNodes(this.props.selNode.id, alsoNodeId)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default RelatedDisplay;","C:\\Users\\npvoj\\Dev\\cs765\\tos\\src\\ChordDisplay.js",["49","50"],"import { Component } from 'react';\r\nimport ChordDiagram from 'react-chord-diagram';\r\n\r\nimport nodes from './data/data.json';\r\n\r\nconst matrix = [\r\n  [11975, 5871, 8916, 2868],\r\n  [1951, 10048, 2060, 6171],\r\n  [8010, 16145, 8090, 8045],\r\n  [1013, 990, 940, 6907]\r\n]; \r\n\r\nconst matrix2 = [\r\n\t[0, 7675, 1406, 234, 232],\r\n\t[7675, 0, 164, 1674, 285],\r\n\t[1406, 164, 0, 219, 0],\r\n\t[234, 1674, 219, 0, 0],\r\n\t[232, 285, 0, 0, 0]\r\n\r\n]\r\n\r\n\r\n\r\nconst getAlsoIntersection = (sel, rel) => {\r\n\tconst selAlsoIds = Object.keys(sel.also);\r\n\tconst relAlsoIds = Object.keys(rel.also);\r\n\tconst overlapping = selAlsoIds.filter(item => relAlsoIds.includes(item));\r\n\tconst withCounts = overlapping.map(item => {\r\n\t\treturn ({\r\n\t\t\t[item]: rel.also[item]\r\n\t\t});\r\n\t});\r\n\tconst sorted = withCounts.sort((a, b) => {\r\n\t\tif (Object.values(a)[0] < Object.values(b)[0]) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tif (Object.values(a)[0] > Object.values(b)[0]) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t});\r\n\treturn sorted.slice(0,4).map(item => Object.keys(item)[0]);\r\n}\r\n\r\nconst getMatrixNodes = (sel, rel) => {\r\n\tconst alsoIntersection = getAlsoIntersection(sel, rel);\r\n\tconst matrixNodes = [rel].concat(alsoIntersection.map(a => nodes[a]));\r\n\treturn matrixNodes;\r\n}\r\n\r\nconst createMatrix = (sel, rel) => {\r\n\tconst matrixNodes = getMatrixNodes(sel, rel);\r\n\tconst matrix = [];\r\n\tmatrixNodes.forEach((item, outerInd) => matrix.push(\r\n\t\t\r\n\t\tmatrixNodes.map((node, innerInd) => {\r\n\t\t\tif (outerInd === innerInd) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tif (item.also[node.id] === undefined) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\treturn item.also[node.id];\r\n\t\t})\r\n\t));\r\n\r\n\tconsole.log(matrix);\r\n\treturn matrix;\r\n}\r\n\r\nconst colors = [\"#FFBA49\", \"#20A39E\", \"#EF5B5B\", \"#23001E\", \"#8C2155\"];\r\nconst fontColors = [\"#000000\", \"#000000\", \"#000000\", \"#FFFFFF\", \"#FFFFFF\"];\r\n\r\nclass ChordDisplay extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmatrix: this.props.relNode !== undefined ? createMatrix(this.props.selNode, this.props.relNode) : undefined\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst myMatrixNodes = this.props.relNode !== undefined ? getMatrixNodes(this.props.selNode, this.props.relNode) : undefined;\r\n\t\tconsole.log(myMatrixNodes);\r\n\t\tconst myMatrix = this.props.relNode !== undefined ? createMatrix(this.props.selNode, this.props.relNode) : undefined;\r\n\t\tconst myColors = myMatrix !== undefined ? colors.slice(0, myMatrix.length) : undefined;\r\n\t\tconst myFontColors = myMatrix !== undefined ? fontColors.slice(0, myMatrix.length) : undefined;\r\n\t\tconst myLabels = myMatrix !== undefined ? myMatrix.map(row => row.reduce((acc, cur) => acc + cur, 0)) : undefined;\r\n\t\treturn (\r\n\t\t\t<div style={{display: \"flex\", flexFlow: \"column\", justifyContent: \"center\", alignItem: \"center\",}}>\r\n\t\t\t\t{\r\n\t\t\t\t\tmyMatrix !== undefined && myMatrixNodes.length > 1 &&\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<div style={{flex: 1}}>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tmyMatrixNodes.map((node, ind) => {\r\n\t\t\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t\t\t<div key={node.id} \r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: \"5px\", \r\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: myColors[ind], \r\n\t\t\t\t\t\t\t\t\t\t\t\tdisplay: \"inline-block\", \r\n\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: \"bold\", \r\n\t\t\t\t\t\t\t\t\t\t\t\tcolor: myFontColors[ind], \r\n\t\t\t\t\t\t\t\t\t\t\t\tcursor: \"pointer\"}}\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.props.setRelatedNode(node.id)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{ node.name }\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<ChordDiagram\r\n\t\t\t\t\t\t\tmatrix={myMatrix}\r\n\t\t\t\t\t\t\tcomponentId={1}\r\n\t\t\t\t\t\t\theight={400}\r\n\t\t\t\t\t\t\tresizeWithWindow={true}\r\n\t\t\t\t\t\t\tgroupLabels={myLabels}\r\n\t\t\t\t\t\t\tgroupColors={myColors}\r\n\t\t\t\t\t\t\tgroupOnClick={(ind) => this.props.setRelatedNode(myMatrixNodes[ind].id)}\r\n\t\t\t\t\t\t\tstyle={{flex: 1, marginTop: 20}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</>\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tmyMatrix !== undefined && myMatrixNodes.length === 1 &&\r\n\t\t\t\t\t<div style={{margin: \"auto\", padding: \"10px\"}}>\r\n\t\t\t\t\t\tThis related category does not overlap with any other related category.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tmyMatrix === undefined &&\r\n\t\t\t\t\t<div style={{margin: \"auto\", padding: \"10px\"}}>\r\n\t\t\t\t\t\tPlease select a related category.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ChordDisplay;",{"ruleId":"51","severity":1,"message":"52","line":1,"column":21,"nodeType":"53","messageId":"54","endLine":1,"endColumn":29},{"ruleId":"55","severity":1,"message":"56","line":85,"column":2,"nodeType":"57","messageId":"58","endLine":87,"endColumn":3},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"55","severity":1,"message":"56","line":8,"column":2,"nodeType":"57","messageId":"58","endLine":10,"endColumn":3},{"ruleId":"55","severity":1,"message":"56","line":45,"column":2,"nodeType":"57","messageId":"58","endLine":47,"endColumn":3},{"ruleId":"55","severity":1,"message":"56","line":95,"column":2,"nodeType":"57","messageId":"58","endLine":97,"endColumn":3},{"ruleId":"63","severity":1,"message":"64","line":233,"column":35,"nodeType":"65","messageId":"66","endLine":233,"endColumn":37},{"ruleId":"51","severity":1,"message":"67","line":6,"column":7,"nodeType":"53","messageId":"54","endLine":6,"endColumn":13},{"ruleId":"51","severity":1,"message":"68","line":13,"column":7,"nodeType":"53","messageId":"54","endLine":13,"endColumn":14},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'matrix' is assigned a value but never used.","'matrix2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]